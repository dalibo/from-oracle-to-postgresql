<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Porting SQL queries on From Oracle to PostgreSQL</title><link>https://dalibo.github.io/from-oracle-to-postgresql/porting-sql-queries/</link><description>Recent content in Porting SQL queries on From Oracle to PostgreSQL</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://dalibo.github.io/from-oracle-to-postgresql/porting-sql-queries/index.xml" rel="self" type="application/rss+xml"/><item><title>Specificities on Data types</title><link>https://dalibo.github.io/from-oracle-to-postgresql/specificities-on-data-types/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dalibo.github.io/from-oracle-to-postgresql/specificities-on-data-types/</guid><description>Specificities on Data types # Varchar handling # For Oracle, an empty string is also a NULL string. It is both. PostgreSQL makes the difference: either the string is unknown (IS NULL), either it is empty.</description></item><item><title>Joins</title><link>https://dalibo.github.io/from-oracle-to-postgresql/joins/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dalibo.github.io/from-oracle-to-postgresql/joins/</guid><description>Joins # Oracle supports the ISO-standard way of writing joins only since the 9i version. Previously, joins were written as stipulated by the first SQL standard, with a proprietary notation for outer joins.</description></item><item><title>Conditional expressions</title><link>https://dalibo.github.io/from-oracle-to-postgresql/conditional-expressions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dalibo.github.io/from-oracle-to-postgresql/conditional-expressions/</guid><description>Conditional expressions # Although Oracle as support for the different conditional expressions as specified by the SQL standard, far too many SQL queries still use Oracle&amp;rsquo;s historical functions.
DECODE # Oracle&amp;rsquo;s DECODE function is a proprietary equivalent of the standard compliant CASE clause.</description></item><item><title>Hierarchical querying</title><link>https://dalibo.github.io/from-oracle-to-postgresql/hierarchical-querying/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dalibo.github.io/from-oracle-to-postgresql/hierarchical-querying/</guid><description>Hierarchical querying # Oracle provides a CONNECT BY function to explore a hierarchical tree. This proprietary functionality has advanced features such as loop detection and provides pseudo-columns such as depth and path.</description></item><item><title>Transaction management</title><link>https://dalibo.github.io/from-oracle-to-postgresql/transaction-management/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dalibo.github.io/from-oracle-to-postgresql/transaction-management/</guid><description>Transaction management # Transactions and locks are very similar between Oracle and PostgreSQL. There are two major differences. First, Oracle implicitely starts a new transaction when a statement is run and keeps it running until COMMIT, while PostgreSQL is using autocommit by default.</description></item></channel></rss>